style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend("bottomright",pal=pal,values=df$total_cases,title=paste("Nombre de cas de Covid-19 <br>"),opacity = 1)
})
library(gapminder)
library(dplyr)
library(rworldmap)
library(jsonlite)
library(rjson)
library(tibble)
library(ggplot2)
library(shiny)
library(leaflet)
df <- data.frame(pays=c(0),total_cases=c(0))
for(name in choix2){
print(name)
df[nrow(df)+1,] = c(name,json_data[[name]][["data"]][["total_cases_per_million"]][[length(json_data[[name]][["data"]][["total_cases_per_million"]])-1]])
}
df
CovidMap <- joinCountryData2Map(df,joinCode="ISO3",nameJoinColumn="pays")
map <- renderLeaflet({
df <- df
bins <- c(0, 500,1000,1500, 2000,2500,4000,5000,6000,7000,7500,8000,9000,10000,11000,20000,40000,45000,50000,55000,60000,65000,70000,75000,80000,85000,90000,110000)
pal <- colorBin("Reds", domain = df, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>Nbr de cas: %g ",
df$pays, df$total_cases
) %>%
lapply(htmltools::HTML)
leaflet()%>%
addTiles()%>%
addPolygons(data=df,fillColor= ~pal(Value),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend("bottomright",pal=pal,values=df$total_cases,title=paste("Nombre de cas de Covid-19 <br>"),opacity = 1)
})
map
map
map <- renderLeaflet({
df <- CovidMap
bins <- c(0, 500,1000,1500, 2000,2500,4000,5000,6000,7000,7500,8000,9000,10000,11000,20000,40000,45000,50000,55000,60000,65000,70000,75000,80000,85000,90000,110000)
pal <- colorBin("Reds", domain = df, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>Nbr de cas: %g ",
df$pays, df$total_cases
) %>%
lapply(htmltools::HTML)
leaflet()%>%
addTiles()%>%
addPolygons(data=df,fillColor= ~pal(Value),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend("bottomright",pal=pal,values=df$total_cases,title=paste("Nombre de cas de Covid-19 <br>"),opacity = 1)
})
map
library(gapminder)
library(dplyr)
library(rworldmap)
library(jsonlite)
library(rjson)
library(tibble)
library(shiny)
library(leaflet)
library(shiny)
library(gapminder)
library(dplyr)
library(ggplot2)
library(shinydashboard)
library(tidyverse)
library(ggmap)
library(rworldmap)
library(viridis)
library(riskyr)
library(leaflet)
json_data <- read_json(path="https://covid.ourworldindata.org/data/owid-covid-data.json", simplifyDataFrame = TRUE, simplifyVector = TRUE, flatten = TRUE)
choix <- as.data.frame(names(json_data))
totalcas <- as.data.frame(json_data[["FRA"]][["data"]]["total_deaths_per_million"])
date <- as.data.frame(json_data[["FRA"]][["data"]]["date"])
choix2 <- names(json_data)
##code map de base
# library(highcharter)
# library(dplyr)
# library(maps)
#
# dat <- iso3166
# dat <- rename(dat, "iso-a3" = a3)
# dat$Cas_covid <- ifelse(dat$`iso-a3` %in% choix, 1, 0)
#
# hcmap(
#   map = "custom/world-highres3", # high resolution world map
#   data = dat, # name of dataset
#   joinBy = "iso-a3",
#   value = "visited",
#   showInLegend = FALSE, # hide legend
#   nullColor = "#DADADA",
#   download_map_data = TRUE
# ) %>%
#   hc_mapNavigation(enabled = FALSE) %>%
#   hc_legend("none") %>%
#   hc_title(text = "World map") # title
#
# dat <- subset(dat, dat$visited == 1)
# sort(dat$ISOname) # sort is to have the visited countries in alphabetical order
#
# paste(
#   "Total: ",
#   sum(dat$visited),
#   " countries."
# )
### test MAP gestion de donnnées
#
# efg <- as.data.frame(json_data[["AFG"]][["data"]][["date"]])
# efg2 <- as.data.frame(json_data[["AFG"]][["data"]][["total_cases_per_million"]])
# efg3 <- as.data.frame(rep("AFG",times = nrow(efg2)))
# choix3 <- choix2[-1]
# colnames(efg2)[1] <- "Cas_covid"
# colnames(efg3)[1] <- "Pays"
# colnames(efg)[1] <- "date"
#
# for ( nom in choix3 ){
#   g <- as.data.frame(json_data[[nom]][["data"]][["date"]])
#   colnames(g)[1] <- "date"
#   efg <- rbind(efg,g)
#
#   g2 <- as.data.frame(json_data[[nom]][["data"]][["total_cases_per_million"]])
#   # colnames(g2)[1] <- "Cas_covid"
#   # efg2 <- rbind(efg2,g2)
#
#   # g3 <- as.data.frame(rep(nom,times = nrow(efg2)))
#   # colnames(g3)[1] <- "Pays"
#   # efg3 <- rbind(efg3,g3)
#
# }
#
# h <- as.data.frame(json_data[["AFG"]][["data"]]["total_cases_per_million"])
#### test map 3
# library(jsonlite)
#
# # From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
# geojson <- readLines("json/countries.geojson", warn = FALSE) %>%
#   paste(collapse = "\n") %>%
#   fromJSON(simplifyVector = FALSE)
#
# # Default styles for all features
# geojson$style = list(
#   weight = 1,
#   color = "#555555",
#   opacity = 1,
#   fillOpacity = 0.8
# )
#
# # Gather GDP estimate from all countries
# gdp_md_est <- sapply(geojson$features, function(feat) {
#   feat$properties$gdp_md_est
# })
# # Gather population estimate from all countries
# pop_est <- sapply(geojson$features, function(feat) {
#   max(1, feat$properties$pop_est)
# })
#
# # Color by per-capita GDP using quantiles
# pal <- colorQuantile("Greens", gdp_md_est / pop_est)
# # Add a properties$style list to each feature
# geojson$features <- lapply(geojson$features, function(feat) {
#   feat$properties$style <- list(
#     fillColor = pal(
#       feat$properties$gdp_md_est / max(1, feat$properties$pop_est)
#     )
#   )
#   feat
# })
#
# # Add the now-styled GeoJSON object to the map
# leaflet() %>% addGeoJSON(geojson)
df <- data.frame(pays=c(0),total_cases=c(0))
for(name in choix2){
print(name)
df[nrow(df)+1,] = c(name,json_data[[name]][["data"]][["total_cases_per_million"]][[length(json_data[[name]][["data"]][["total_cases_per_million"]])-1]])
}
df
CovidMap <- joinCountryData2Map(df,joinCode="ISO3",nameJoinColumn="pays")
CovidMap
View(CovidMap)
map <- renderLeaflet({
df <- CovidMap
bins <- c(0, 500,1000,1500, 2000,2500,4000,5000,6000,7000,7500,8000,9000,10000,11000,20000,40000,45000,50000,55000,60000,65000,70000,75000,80000,85000,90000,110000)
pal <- colorBin("Reds", domain = df, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>Nbr de cas: %g ",
df$pays, df$total_cases
) %>%
lapply(htmltools::HTML)
leaflet()%>%
addTiles()%>%
addPolygons(data=df,fillColor= ~pal(Value),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend("bottomright",pal=pal,values=df$total_cases,title=paste("Nombre de cas de Covid-19 <br>"),opacity = 1)
})
df1 <- data.frame(pays=c(0),total_cases=c(0))
for(name in choix2){
print(name)
df1[nrow(df1)+1,] = c(name,json_data[[name]][["data"]][["total_cases_per_million"]][[length(json_data[[name]][["data"]][["total_cases_per_million"]])-1]])
}
df1
CovidMap <- joinCountryData2Map(df1,joinCode="ISO3",nameJoinColumn="pays")
CarteWorld <- renderLeaflet({
df <- CovidMap
bins <- c(0, 500,1000,1500, 2000,2500,4000,5000,6000,7000,7500,8000,9000,10000,11000,20000,40000,45000,50000,55000,60000,65000,70000,75000,80000,85000,90000,110000)
pal <- colorBin("Reds", domain = df, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>Nbr de cas: %g ",
df$pays, df$total_cases
) %>%
lapply(htmltools::HTML)
leaflet()%>%
addTiles()%>%
addPolygons(data=df,fillColor= ~pal(Value),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend("bottomright",pal=pal,values=df$total_cases,title=paste("Nombre de cas de Covid-19 <br>"),opacity = 1)
})
CarteWorld
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
View(totalcas)
runApp('Covid-19')
df1
df1[2]
df1$total_cases <- as.numeric(df1$total_cases)
df1
library(gapminder)
library(dplyr)
library(rworldmap)
library(jsonlite)
library(rjson)
library(tibble)
library(shiny)
library(leaflet)
library(shiny)
library(gapminder)
library(dplyr)
library(ggplot2)
library(shinydashboard)
library(tidyverse)
library(ggmap)
library(rworldmap)
library(viridis)
library(riskyr)
library(leaflet)
json_data <- read_json(path="https://covid.ourworldindata.org/data/owid-covid-data.json", simplifyDataFrame = TRUE, simplifyVector = TRUE, flatten = TRUE)
choix <- as.data.frame(names(json_data))
totalcas <- as.data.frame(json_data[["FRA"]][["data"]]["total_deaths_per_million"])
date <- as.data.frame(json_data[["FRA"]][["data"]]["date"])
choix2 <- names(json_data)
##code map de base
# library(highcharter)
# library(dplyr)
# library(maps)
#
# dat <- iso3166
# dat <- rename(dat, "iso-a3" = a3)
# dat$Cas_covid <- ifelse(dat$`iso-a3` %in% choix, 1, 0)
#
# hcmap(
#   map = "custom/world-highres3", # high resolution world map
#   data = dat, # name of dataset
#   joinBy = "iso-a3",
#   value = "visited",
#   showInLegend = FALSE, # hide legend
#   nullColor = "#DADADA",
#   download_map_data = TRUE
# ) %>%
#   hc_mapNavigation(enabled = FALSE) %>%
#   hc_legend("none") %>%
#   hc_title(text = "World map") # title
#
# dat <- subset(dat, dat$visited == 1)
# sort(dat$ISOname) # sort is to have the visited countries in alphabetical order
#
# paste(
#   "Total: ",
#   sum(dat$visited),
#   " countries."
# )
### test MAP gestion de donnnées
#
# efg <- as.data.frame(json_data[["AFG"]][["data"]][["date"]])
# efg2 <- as.data.frame(json_data[["AFG"]][["data"]][["total_cases_per_million"]])
# efg3 <- as.data.frame(rep("AFG",times = nrow(efg2)))
# choix3 <- choix2[-1]
# colnames(efg2)[1] <- "Cas_covid"
# colnames(efg3)[1] <- "Pays"
# colnames(efg)[1] <- "date"
#
# for ( nom in choix3 ){
#   g <- as.data.frame(json_data[[nom]][["data"]][["date"]])
#   colnames(g)[1] <- "date"
#   efg <- rbind(efg,g)
#
#   g2 <- as.data.frame(json_data[[nom]][["data"]][["total_cases_per_million"]])
#   # colnames(g2)[1] <- "Cas_covid"
#   # efg2 <- rbind(efg2,g2)
#
#   # g3 <- as.data.frame(rep(nom,times = nrow(efg2)))
#   # colnames(g3)[1] <- "Pays"
#   # efg3 <- rbind(efg3,g3)
#
# }
#
# h <- as.data.frame(json_data[["AFG"]][["data"]]["total_cases_per_million"])
#### test map 3
# library(jsonlite)
#
# # From http://data.okfn.org/data/datasets/geo-boundaries-world-110m
# geojson <- readLines("json/countries.geojson", warn = FALSE) %>%
#   paste(collapse = "\n") %>%
#   fromJSON(simplifyVector = FALSE)
#
# # Default styles for all features
# geojson$style = list(
#   weight = 1,
#   color = "#555555",
#   opacity = 1,
#   fillOpacity = 0.8
# )
#
# # Gather GDP estimate from all countries
# gdp_md_est <- sapply(geojson$features, function(feat) {
#   feat$properties$gdp_md_est
# })
# # Gather population estimate from all countries
# pop_est <- sapply(geojson$features, function(feat) {
#   max(1, feat$properties$pop_est)
# })
#
# # Color by per-capita GDP using quantiles
# pal <- colorQuantile("Greens", gdp_md_est / pop_est)
# # Add a properties$style list to each feature
# geojson$features <- lapply(geojson$features, function(feat) {
#   feat$properties$style <- list(
#     fillColor = pal(
#       feat$properties$gdp_md_est / max(1, feat$properties$pop_est)
#     )
#   )
#   feat
# })
#
# # Add the now-styled GeoJSON object to the map
# leaflet() %>% addGeoJSON(geojson)
df1 <- data.frame(pays=c(0),total_cases=c(0))
for(name in choix2){
print(name)
df1[nrow(df1)+1,] = c(name,json_data[[name]][["data"]][["total_cases_per_million"]][[length(json_data[[name]][["data"]][["total_cases_per_million"]])-1]])
}
df1$total_cases <- as.numeric(df1$total_cases)
CovidMap <- joinCountryData2Map(df1,joinCode="ISO3",nameJoinColumn="pays")
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
library(gapminder)
library(dplyr)
library(rworldmap)
library(jsonlite)
library(rjson)
library(tibble)
library(shiny)
library(leaflet)
library(shiny)
library(gapminder)
library(dplyr)
library(ggplot2)
library(shinydashboard)
library(tidyverse)
library(ggmap)
library(rworldmap)
library(viridis)
library(riskyr)
library(leaflet)
###Modification pour
json_data <- read_json(path="https://covid.ourworldindata.org/data/owid-covid-data.json", simplifyDataFrame = TRUE, simplifyVector = TRUE, flatten = TRUE)
choix <- as.data.frame(names(json_data))
totalcas <- as.data.frame(json_data[["FRA"]][["data"]]["total_deaths_per_million"])
date <- as.data.frame(json_data[["FRA"]][["data"]]["date"])
List_pays <- names(json_data)
library(gapminder)
library(dplyr)
library(rworldmap)
library(jsonlite)
library(rjson)
library(tibble)
library(shiny)
library(leaflet)
library(shiny)
library(gapminder)
library(dplyr)
library(ggplot2)
library(shinydashboard)
library(tidyverse)
library(ggmap)
library(rworldmap)
library(viridis)
library(riskyr)
library(leaflet)
###Modification pour
json_data <- read_json(path="https://covid.ourworldindata.org/data/owid-covid-data.json", simplifyDataFrame = TRUE, simplifyVector = TRUE, flatten = TRUE)
choix <- as.data.frame(names(json_data))
totalcas <- as.data.frame(json_data[["FRA"]][["data"]]["total_deaths_per_million"])
date <- as.data.frame(json_data[["FRA"]][["data"]]["date"])
List_pays <- names(json_data)
View(json_data)
##Modification pour la MAP
###Cas de Covid-19
df_cas <- data.frame(pays=c(0),total_cases=c(0))
for(name in List_pays){
print(name)
df_cas[nrow(df_cas)+1,] = c(name,json_data[[name]][["data"]][["total_cases_per_million"]][[length(json_data[[name]][["data"]][["total_cases_per_million"]])-1]])
}
df_cas$total_cases <- as.numeric(df_cas$total_cases)
CovidCasMap <- joinCountryData2Map(df_cas,joinCode="ISO3",nameJoinColumn="pays")
df_mort <- data.frame(pays=c(0),total_cases=c(0))
for(name in List_pays){
print(name)
df_mort[nrow(df_mort)+1,] = c(name,json_data[[name]][["data"]][["total_deaths_per_million"]][[length(json_data[[name]][["data"]][["total_deaths_per_million"]])-1]])
}
df_mort$total_cases <- as.numeric(df_mort$total_cases)
CovidMortMap <- joinCountryData2Map(df_mort,joinCode="ISO3",nameJoinColumn="pays")
df_mort
max(df_mort$total_cases)
df_mort <- data.frame(pays=c(0),total_deaths=c(0))
for(name in List_pays){
print(name)
df_mort[nrow(df_mort)+1,] = c(name,json_data[[name]][["data"]][["total_deaths_per_million"]][[length(json_data[[name]][["data"]][["total_deaths_per_million"]])-1]])
}
df_mort$total_deaths <- as.numeric(df_mort$total_deaths)
CovidMortMap <- joinCountryData2Map(df_mort,joinCode="ISO3",nameJoinColumn="pays")
df_mort
View(CovidMortMap)
runApp('Covid-19')
runApp('Covid-19')
View(df_mort)
runApp('Covid-19')
runApp('Covid-19')
runApp('Covid-19')
